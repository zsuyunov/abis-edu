# ============================================================================
# School Management System - Environment Configuration
# ============================================================================
# SECURITY NOTICE: Never commit actual .env file to version control!
# Rename this file to .env and fill in your actual values
# ============================================================================

# ----------------------------------------------------------------------------
# Database Configuration
# ----------------------------------------------------------------------------
# PostgreSQL connection string (use Neon, Railway, or other PostgreSQL provider)
# Format: postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=public
DATABASE_URL="postgresql://username:password@hostname:5432/database_name?sslmode=require"

# ----------------------------------------------------------------------------
# JWT & Authentication Secrets
# ----------------------------------------------------------------------------
# CRITICAL: Generate strong random secrets for production!
# Use: openssl rand -base64 64

# Secret for signing access tokens (short-lived, 15 minutes)
# MUST be different from REFRESH_TOKEN_SECRET
JWT_SECRET="CHANGE_THIS_TO_A_RANDOM_64_CHARACTER_STRING_FOR_ACCESS_TOKENS"

# Secret for signing refresh tokens (long-lived, 7 days)
# MUST be different from JWT_SECRET
REFRESH_TOKEN_SECRET="CHANGE_THIS_TO_A_DIFFERENT_RANDOM_64_CHARACTER_STRING_FOR_REFRESH_TOKENS"

# Token expiry times
ACCESS_TOKEN_EXPIRY="15m"   # 15 minutes (recommended)
REFRESH_TOKEN_EXPIRY="7d"   # 7 days (recommended)

# ----------------------------------------------------------------------------
# Application Configuration
# ----------------------------------------------------------------------------
NODE_ENV="production"  # or "development"
PORT=3000

# Application URL (used for CORS, redirects, etc.)
NEXT_PUBLIC_APP_URL="https://your-school-app.com"

# ----------------------------------------------------------------------------
# Security Configuration (PRODUCTION-HARDENED)
# ----------------------------------------------------------------------------
# Enable/disable security features
ENABLE_RATE_LIMITING="true"
ENABLE_MFA="false"  # MFA is currently disabled - see MFA_DISABLED_NOTE.md to enable
ENABLE_SECURITY_LOGGING="true"

# Account lockout settings
MAX_FAILED_LOGIN_ATTEMPTS="5"
ACCOUNT_LOCKOUT_DURATION_MINUTES="30"

# ----------------------------------------------------------------------------
# Redis Configuration (PRODUCTION: Required for multi-instance deployments)
# ----------------------------------------------------------------------------
# For production with multiple instances, use Redis (e.g., Upstash free tier)
# For single-instance development, leave blank to use in-memory storage
# Format: redis://username:password@hostname:port or rediss:// for SSL
# Example Upstash: rediss://default:YOUR_PASSWORD@YOUR_HOSTNAME.upstash.io:6379
REDIS_URL=""

# ----------------------------------------------------------------------------
# MFA Encryption Key (PRODUCTION: Required when MFA is enabled)
# ----------------------------------------------------------------------------
# 32-byte key for encrypting MFA secrets at rest (AES-256-GCM)
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
# Only needed when ENABLE_MFA="true"
MFA_ENCRYPTION_KEY=""

# ----------------------------------------------------------------------------
# File Upload / Storage (Optional)
# ----------------------------------------------------------------------------
# If using ImageKit or similar service
IMAGEKIT_PUBLIC_KEY=""
IMAGEKIT_PRIVATE_KEY=""
IMAGEKIT_URL_ENDPOINT=""

# ----------------------------------------------------------------------------
# Email / SMS Configuration (for password reset, notifications)
# ----------------------------------------------------------------------------
# Configure your email provider (e.g., SendGrid, AWS SES, Mailgun)
EMAIL_PROVIDER="sendgrid"  # or "aws-ses", "mailgun", etc.
EMAIL_FROM="noreply@your-school.com"
EMAIL_API_KEY=""

# SMS provider (for MFA codes, alerts)
SMS_PROVIDER="twilio"  # or "aws-sns", etc.
SMS_API_KEY=""
SMS_FROM_NUMBER=""

# ============================================================================
# PRODUCTION DEPLOYMENT CHECKLIST
# ============================================================================
# Before deploying to production, ensure:
# 
# 1. ✅ All secrets are generated with: openssl rand -base64 64
# 2. ✅ JWT_SECRET and REFRESH_TOKEN_SECRET are DIFFERENT and STRONG
# 3. ✅ DATABASE_URL points to production database (Neon with SSL)
# 4. ✅ NODE_ENV is set to "production"
# 5. ✅ Database user has minimal required permissions (not superuser)
# 6. ✅ REDIS_URL is set for multi-instance deployments
# 7. ✅ MFA_ENCRYPTION_KEY is generated (if enabling MFA later)
# 8. ✅ Email/SMS providers are configured
# 9. ✅ .env file is NOT committed to git (check .gitignore)
# 10. ✅ Environment variables are set in deployment platform (Render, Vercel, etc.)
# 11. ✅ SSL/TLS is enabled for database connections
# 12. ✅ Run database migration: npx prisma migrate deploy
# 13. ✅ Apply manual SQL migration: migration-security-manual.sql
# 14. ✅ Regenerate Prisma client: npx prisma generate
# 15. ✅ Force password reset for all users: node scripts/invalidate-all-sessions.js
# 16. ✅ Enable Cloudflare WAF if using Cloudflare (recommended)
# 17. ✅ Monitor SecurityLog table for suspicious activity
# 18. ✅ Set up alerts for failed login spikes
# ============================================================================

# ============================================================================
# SECURITY IMPROVEMENTS (PRODUCTION-READY)
# ============================================================================
# This system implements:
# ✅ Argon2id password hashing (bcrypt fallback with auto-upgrade)
# ✅ Short-lived access tokens (15 min) + rotating refresh tokens (7 days)
# ✅ SHA-256 hashed refresh tokens in database
# ✅ Token versioning for global session invalidation
# ✅ Rate limiting on login/password-reset (5 attempts per 15 min)
# ✅ Account lockout after 5 failed attempts (30 min)
# ✅ Hardened CSP (no unsafe-inline/unsafe-eval)
# ✅ HSTS, X-Frame-Options, X-Content-Type-Options security headers
# ✅ Security event logging (login success/fail, suspicious activity)
# ✅ httpOnly/Secure/SameSite=Strict cookies
# ✅ Input validation with Zod schemas
# ✅ CSRF protection ready (uncomment in API routes when needed)
# ✅ Redis support for distributed storage (rate-limiting, CSRF)
# ✅ MFA infrastructure ready (currently disabled)
# 
# Remaining improvements for maximum security:
# □ Enable MFA for admin/teacher accounts (see MFA_DISABLED_NOTE.md)
# □ Set up Redis for production (Upstash free tier)
# □ Configure email provider for password reset
# □ Add monitoring/alerting for SecurityLog events
# □ Consider WAF (Cloudflare free tier)
# □ Regular security audits and penetration testing
# ============================================================================

