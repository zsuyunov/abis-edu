const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

// Student data
const studentsData = [
  {
    studentId: 'S62955',
    lastName: '–ê–±–¥—É–∂–∞–±–±–æ—Ä–æ–≤–∞',
    firstName: '–ê—Å–ª–∏—è –ê–±–¥—É–∂–∞–º–æ–ª –∫–∏–∑–∏',
    dateOfBirth: '2001-05-27',
    phone: '+998951515280',
    password: '–ê–±–¥—É–∂–∞–±–±–æ—Ä–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S39162',
    lastName: '–ê–±–¥—É–º–∞–∂–∏–¥–æ–≤–∞',
    firstName: '–≠—ä–∑–æ–∑–∞ –ê–±–¥—É—Ä–∞—É—Ñ –∫–∏–∑–∏',
    dateOfBirth: '2001-05-28',
    phone: '+998951515281',
    password: '–ê–±–¥—É–º–∞–∂–∏–¥–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S56846',
    lastName: '–ê–±–¥—É—Ä–∞—Ö–∏–º–æ–≤–∞',
    firstName: '–ú–∞—Ä—è–º –•—É—Ä—à–∏–¥–æ–≤–Ω–∞',
    dateOfBirth: '2001-05-29',
    phone: '+998951515282',
    password: '–ê–±–¥—É—Ä–∞—Ö–∏–º–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S48318',
    lastName: '–ê–±–ª–∞—Ö–∞—Ç–æ–≤–∞',
    firstName: '–°–∞—Ñ–∏–Ω–∞ –ë–µ—Ö–∑–æ–¥ –∫–∏–∑–∏',
    dateOfBirth: '2001-05-30',
    phone: '+998951515283',
    password: '–ê–±–ª–∞—Ö–∞—Ç–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S71602',
    lastName: '–ê–∑–∞–º–æ–≤–∞',
    firstName: '–ê–º–∏–Ω–∞ –≠–ª–º—É—Ä–æ–¥–æ–≤–Ω–∞',
    dateOfBirth: '2001-05-31',
    phone: '+998951515284',
    password: '–ê–∑–∞–º–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S24743',
    lastName: '–ê—Ä–∏—Ñ—Ö–∞–¥–∂–∞–µ–≤–∞',
    firstName: '–†–æ–±–∏—è—Ö–æ–Ω –ê—Ä–∏—Ñ—Ö–∞–¥–∂–∞–µ–≤–Ω–∞',
    dateOfBirth: '2001-06-01',
    phone: '+998951515285',
    password: '–ê—Ä–∏—Ñ—Ö–∞–¥–∂–∞–µ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S85976',
    lastName: '–ë–µ–∫–ø—É–ª–∞—Ç–æ–≤–∞',
    firstName: '–ó–∞—Ö—Ä–æ –°–∞–Ω–∂–∞—Ä–±–µ–∫ –∫–∏–∑–∏',
    dateOfBirth: '2001-06-02',
    phone: '+998951515286',
    password: '–ë–µ–∫–ø—É–ª–∞—Ç–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S50437',
    lastName: '–ë–æ–π–º—É—Ö–∞–º–º–µ–¥–æ–≤–∞',
    firstName: '–°–æ–ª–∏—Ö–∞ –û—Ç–∞–±–µ–∫ “õ–∏–∑–∏',
    dateOfBirth: '2001-06-03',
    phone: '+998951515287',
    password: '–ë–æ–π–º—É—Ö–∞–º–º–µ–¥–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S17491',
    lastName: '–í–∞—Ö–æ–±–æ–≤–∞',
    firstName: '–°–∞—Ñ–∏—è –°–∞–π–¥–∞–∫–±–∞—Ä “õ–∏–∑–∏',
    dateOfBirth: '2001-06-04',
    phone: '+998951515288',
    password: '–í–∞—Ö–æ–±–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S62958',
    lastName: '–ù–∞–∑–∞—Ä–æ–≤–∞',
    firstName: '–ó–∏–µ–¥–∞ –û–ª–∏–º–∂–æ–Ω –∫–∏–∑–∏',
    dateOfBirth: '2001-06-05',
    phone: '+998951515289',
    password: '–ù–∞–∑–∞—Ä–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S39165',
    lastName: '–ù–µ–º–∞—Ç—É–ª–ª–∞–µ–≤–∞',
    firstName: '–†–∞–π–π–æ–Ω–∞—Ö–æ–Ω –°–∞–º–∞–Ω–¥–∞—Ä –∫–∏–∑–∏',
    dateOfBirth: '2001-06-06',
    phone: '+998951515290',
    password: '–ù–µ–º–∞—Ç—É–ª–ª–∞–µ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S56849',
    lastName: '–û—Ä–∏—Ñ–∂–æ–Ω–æ–≤–∞',
    firstName: '–û—Å–∏—ë –°–æ–±–∏—Ä–∂–æ–Ω –∫–∏–∑–∏',
    dateOfBirth: '2001-06-07',
    phone: '+998951515291',
    password: '–û—Ä–∏—Ñ–∂–æ–Ω–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S48321',
    lastName: '–†–∞“≥–∏–º—Ö–æ–Ω–æ–≤–∞',
    firstName: '–ó–∞–π–Ω–∞–±—Ö–æ–Ω –ê–∫–±–∞—Ä—Ö–æ–Ω “õ–∏–∑–∏',
    dateOfBirth: '2001-06-08',
    phone: '+998951515292',
    password: '–†–∞“≥–∏–º—Ö–æ–Ω–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S71605',
    lastName: '–£–±–∞–π–¥—É–ª–ª–∞–µ–≤–∞',
    firstName: '–§–∞—Ä–∑–æ–Ω–∞ –®–µ—Ä–∑–æ–¥–æ–≤–Ω–∞',
    dateOfBirth: '2001-06-09',
    phone: '+998951515293',
    password: '–£–±–∞–π–¥—É–ª–ª–∞–µ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S24746',
    lastName: '–•–∞–π—Ä—É–ª–ª–∞–µ–≤–∞',
    firstName: '–°–æ–ª–∏—Ö–∞ –ê–±–±–æ—Å–∂–æ–Ω –∫–∏–∑–∏',
    dateOfBirth: '2001-06-10',
    phone: '+998951515294',
    password: '–•–∞–π—Ä—É–ª–ª–∞–µ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S85979',
    lastName: '–•–∞–∫–∏–º–æ–≤–∞',
    firstName: '–ú—É—Ö—Å–∏–Ω–∞ –ö–æ–º–∏–ª–æ–≤–Ω–∞',
    dateOfBirth: '2001-06-11',
    phone: '+998951515295',
    password: '–•–∞–∫–∏–º–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S50440',
    lastName: '–®–∞–º—Å—É—Ç–¥–∏–Ω–æ–≤–∞',
    firstName: '–ë–∏–±–∏—Å–æ—Ä–∞ –ë–æ–±—É—Ä–æ–≤–Ω–∞',
    dateOfBirth: '2001-06-12',
    phone: '+998951515296',
    password: '–®–∞–º—Å—É—Ç–¥–∏–Ω–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S17494',
    lastName: '–®—É—Ö—Ä–∞—Ç–æ–≤–∞',
    firstName: '–†–∞–π—Ö–æ–Ω–∞ –ê–∫–º–∞–ª –∫–∏–∑–∏',
    dateOfBirth: '2001-06-13',
    phone: '+998951515297',
    password: '–®—É—Ö—Ä–∞—Ç–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S62961',
    lastName: '–£–º–∞—Ä–∂–æ–Ω–æ–≤–∞',
    firstName: '–ë–∏–±–∏—Å–æ—Ä–∞ –ù–∞—Å—Ä—É–ª–ª–æ—Ö–æ–Ω –∫–∏–∑–∏',
    dateOfBirth: '2001-06-14',
    phone: '+998951515298',
    password: '–£–º–∞—Ä–∂–æ–Ω–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  }
];

// Function to generate unique student ID
async function generateUniqueStudentId(originalId) {
  let newId = originalId;
  let counter = 1;
  
  while (true) {
    const existing = await prisma.student.findUnique({
      where: { studentId: newId }
    });
    
    if (!existing) {
      return newId;
    }
    
    // Replace last 2 digits with counter (01, 02, 03, etc.)
    const baseId = originalId.substring(0, 3);
    newId = `${baseId}${counter.toString().padStart(2, '0')}`;
    counter++;
    
    if (counter > 99) {
      // If we can't find a unique ID, generate a completely random one
      const randomNum = Math.floor(Math.random() * 90000) + 10000;
      newId = `S${randomNum}`;
    }
  }
}

// Function to generate unique phone number
async function generateUniquePhone(originalPhone) {
  let newPhone = originalPhone;
  let counter = 1;
  
  while (true) {
    const existing = await prisma.student.findFirst({
      where: { phone: newPhone }
    });
    
    if (!existing) {
      return newPhone;
    }
    
    // Generate random Uzbek phone number
    const randomNum = Math.floor(Math.random() * 90000000) + 10000000;
    newPhone = `+9989${randomNum}`;
  }
}

async function main() {
  try {
    console.log('üå± Starting Year 3-"–ê"–°–∞—Ä—ã—á–µ–≤–∞ –î–∏–ª—è –ì–∞—Ä–∏—Ñ–æ–≤–Ω–∞ class and students seeding...');

    // Find branch and academic year
    const branch = await prisma.branch.findFirst({
      where: { shortName: 'Suzuk' }
    });

    if (!branch) {
      throw new Error('Branch "Suzuk" not found');
    }
    console.log(`‚úÖ Found branch: ${branch.legalName} (ID: ${branch.id})`);

    const academicYear = await prisma.academicYear.findFirst({
      where: { name: '2025-2026' }
    });

    if (!academicYear) {
      throw new Error('Academic year "2025-2026" not found');
    }
    console.log(`‚úÖ Found academic year: ${academicYear.name} (ID: ${academicYear.id})`);

    // Create or find class
    const className = '3-"–ê"–°–∞—Ä—ã—á–µ–≤–∞ –î–∏–ª—è –ì–∞—Ä–∏—Ñ–æ–≤–Ω–∞';
    let classRecord = await prisma.class.findFirst({
      where: {
        name: className,
        branchId: branch.id,
        academicYearId: academicYear.id
      }
    });

    if (!classRecord) {
      classRecord = await prisma.class.create({
        data: {
          name: className,
          branchId: branch.id,
          academicYearId: academicYear.id,
          capacity: studentsData.length,
          educationType: 'PRIMARY',
          language: 'UZBEK',
          status: 'ACTIVE'
        }
      });
      console.log(`‚úÖ Created class: ${className} (ID: ${classRecord.id})`);
    } else {
      console.log(`‚úÖ Found existing class: ${className} (ID: ${classRecord.id})`);
    }

    // Process students
    console.log(`üìö Processing ${studentsData.length} students...`);
    let createdCount = 0;
    let errorCount = 0;

    for (const studentData of studentsData) {
      try {
        // Generate unique student ID
        const uniqueStudentId = await generateUniqueStudentId(studentData.studentId);
        if (uniqueStudentId !== studentData.studentId) {
          console.log(`‚ö†Ô∏è  Student ID changed: ${studentData.studentId} ‚Üí ${uniqueStudentId}`);
        }

        // Generate unique phone number
        const uniquePhone = await generateUniquePhone(studentData.phone);
        if (uniquePhone !== studentData.phone) {
          console.log(`üì± Generated phone: ${uniquePhone} for ${studentData.firstName} ${studentData.lastName}`);
        }

        // Hash password
        const hashedPassword = await bcrypt.hash(studentData.password, 10);

        // Create student
        const student = await prisma.student.create({
          data: {
            id: `student_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            studentId: uniqueStudentId,
            lastName: studentData.lastName,
            firstName: studentData.firstName,
            dateOfBirth: new Date(studentData.dateOfBirth),
            phone: uniquePhone,
            password: hashedPassword,
            gender: studentData.gender,
            status: studentData.status,
            branchId: branch.id,
            classId: classRecord.id
          }
        });

        console.log(`‚úÖ Created student: ${student.firstName} ${student.lastName} (${student.studentId})`);
        createdCount++;

      } catch (error) {
        console.error(`‚ùå Error creating student ${studentData.firstName} ${studentData.lastName}:`, error.message);
        errorCount++;
      }
    }

    console.log(`\nüìä Summary:`);
    console.log(`‚úÖ Students created: ${createdCount}`);
    console.log(`‚ùå Errors: ${errorCount}`);
    console.log(`üìö Total processed: ${studentsData.length}`);

    if (errorCount === 0) {
      console.log('\nüéâ All students created successfully!');
    } else {
      console.log(`\n‚ö†Ô∏è  ${errorCount} students failed to create.`);
    }

  } catch (error) {
    console.error('‚ùå Error during seeding:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

main()
  .catch((error) => {
    console.error('‚ùå Seeding failed:', error);
    process.exit(1);
  });
