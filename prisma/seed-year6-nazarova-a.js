const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

// Student data
const studentsData = [
  {
    studentId: 'S39135',
    lastName: '–ë–∞—Ö–æ–¥–∏—Ä–æ–≤–∞',
    firstName: '–ú–æ“≥–∏–Ω—É—Ä –ê–±–¥—É–∂–∞–ª–∏–ª “õ–∏–∑–∏',
    dateOfBirth: '2001-03-08',
    phone: '+998951515200',
    password: '–ë–∞—Ö–æ–¥–∏—Ä–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S56819',
    lastName: '–£—Å–º–æ–Ω–æ–≤–∞',
    firstName: '–°–∞–º–∏—è –û–ª–∏–º–æ–≤–Ω–∞',
    dateOfBirth: '2001-03-09',
    phone: '+998951515201',
    password: '–£—Å–º–æ–Ω–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S48291',
    lastName: '–î–æ–Ω–∏—ë—Ä—Ö—û–∂–∞–µ–≤–∞',
    firstName: '–ú–∞—ä—Ñ—É—Ä–∞—Ö–æ–Ω –•–æ–∂–∏–∞–∫–±–∞—Ä—Ö—û–∂–∞ “õ–∏–∑–∏',
    dateOfBirth: '2001-03-10',
    phone: '+998951515202',
    password: '–î–æ–Ω–∏—ë—Ä—Ö—û–∂–∞–µ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S71575',
    lastName: '–ñ–∞–≤–ª–æ–Ω–æ–≤–∞',
    firstName: '–°–∞–±–∏–Ω–∞ –ñ–∞–º—à–∏–¥ “õ–∏–∑–∏',
    dateOfBirth: '2001-03-11',
    phone: '+998951515203',
    password: '–ñ–∞–≤–ª–æ–Ω–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S24716',
    lastName: '–ó–∏—ë–≤—É–¥–¥–∏–Ω–æ–≤–∞',
    firstName: '–ú—É–±–∏–Ω–∞ –†–∞–º–∑–∏–¥–¥–∏–Ω “õ–∏–∑–∏',
    dateOfBirth: '2001-03-12',
    phone: '+998951515204',
    password: '–ó–∏—ë–≤—É–¥–¥–∏–Ω–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S85949',
    lastName: '–ú–∞“≥–∞–º–∞–¥–∂–æ–Ω–æ–≤–∞',
    firstName: '–Ø—Å–º–∏–Ω–∞ –†—É—Å—Ç–∞–º “õ–∏–∑–∏',
    dateOfBirth: '2001-03-13',
    phone: '+998951515205',
    password: '–ú–∞“≥–∞–º–∞–¥–∂–æ–Ω–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S50410',
    lastName: '–ú—É—Ä–æ–¥–±–µ–∫–æ–≤–∞',
    firstName: '–ú—É“≥—Å–∏–Ω–∞ –°–∞–Ω–∂–∞—Ä–±–µ–∫ “õ–∏–∑–∏',
    dateOfBirth: '2001-03-14',
    phone: '+998951515206',
    password: '–ú—É—Ä–æ–¥–±–µ–∫–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S17464',
    lastName: '–°–∞–π–¥–∞—Ö–º–µ–¥–æ–≤–∞',
    firstName: '–ú–∞–ª–∏–∫–∞—Ö–æ–Ω –ê—Ö—Ä–æ–±–µ–∫ “õ–∏–∑–∏',
    dateOfBirth: '2001-03-15',
    phone: '+998951515207',
    password: '–°–∞–π–¥–∞—Ö–º–µ–¥–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S62931',
    lastName: '–£–±–∞–π–¥—É–ª–ª–∞–µ–≤–∞',
    firstName: '–ú—É–º—Ç–æ–∑–∞–±–µ–≥–∏–º –®–µ—Ä–∑–æ–¥ “õ–∏–∑–∏',
    dateOfBirth: '2001-03-16',
    phone: '+998951515208',
    password: '–£–±–∞–π–¥—É–ª–ª–∞–µ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S39138',
    lastName: '–£—Ä–∏–Ω–æ–≤–∞',
    firstName: '“≤–∞–¥–∏—á–∞ –ê–∫–º–∞–ª–æ–≤–Ω–∞',
    dateOfBirth: '2001-03-17',
    phone: '+998951515209',
    password: '–£—Ä–∏–Ω–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S56822',
    lastName: '–§—É—Ä“õ–∞—Ç—Ö—û–∂–∞–µ–≤–∞',
    firstName: '–†–∞–π–π–æ–Ω–∞—Ö–æ–Ω –î–æ–Ω–∏—ë—Ä “õ–∏–∑–∏',
    dateOfBirth: '2001-03-18',
    phone: '+998951515210',
    password: '–§—É—Ä“õ–∞—Ç—Ö—û–∂–∞–µ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S48294',
    lastName: '–•–∞—Å–∞–Ω–æ–≤–∞',
    firstName: '–ê—Å–∏—è –ñ–∞–º—à–∏–¥ “õ–∏–∑–∏',
    dateOfBirth: '2001-03-19',
    phone: '+998951515211',
    password: '–•–∞—Å–∞–Ω–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S71578',
    lastName: '–•–æ–ª—Ö—û–∂–∞–µ–≤–∞',
    firstName: '–û–º–∏–Ω–∞ –°–∞–∏–¥–∞—Ö–∞–¥ “õ–∏–∑–∏',
    dateOfBirth: '2001-03-20',
    phone: '+998951515212',
    password: '–•–æ–ª—Ö—û–∂–∞–µ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S24719',
    lastName: '–®–∞–≤–∫–∞—Ç–æ–≤–∞',
    firstName: '–û–∏—à–∞ –î–æ–Ω–∏—ë—Ä “õ–∏–∑–∏',
    dateOfBirth: '2001-03-21',
    phone: '+998951515213',
    password: '–®–∞–≤–∫–∞—Ç–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S85952',
    lastName: '–®—É—Ö—Ä–∞—Ç–æ–≤–∞',
    firstName: '–°–∞–∫–∏–Ω–∞ –ê–∫–º–∞–ª “õ–∏–∑–∏',
    dateOfBirth: '2001-03-22',
    phone: '+998951515214',
    password: '–®—É—Ö—Ä–∞—Ç–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S50413',
    lastName: '–§–∞—Ö—Ä–∏–¥–¥–∏–Ω–æ–≤–∞',
    firstName: '–ú–æ“≥–∏–Ω–∞–±–æ–Ω—É –§–∞–∑–ª–∏–¥–¥–∏–Ω “õ–∏–∑–∏',
    dateOfBirth: '2001-03-23',
    phone: '+998951515215',
    password: '–§–∞—Ö—Ä–∏–¥–¥–∏–Ω–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S17467',
    lastName: '–ê–≥–∑–∞–º–æ–≤–∞',
    firstName: '–ú—É–∞–∑–∑–∞–º',
    dateOfBirth: '2001-03-24',
    phone: '+998951515216',
    password: '–ê–≥–∑–∞–º–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  }
];

// Function to generate unique student ID
async function generateUniqueStudentId(originalId) {
  let newId = originalId;
  let counter = 1;
  
  while (true) {
    const existing = await prisma.student.findUnique({
      where: { studentId: newId }
    });
    
    if (!existing) {
      return newId;
    }
    
    // Replace last 2 digits with counter (01, 02, 03, etc.)
    const baseId = originalId.substring(0, 3);
    newId = `${baseId}${counter.toString().padStart(2, '0')}`;
    counter++;
    
    if (counter > 99) {
      // If we can't find a unique ID, generate a completely random one
      const randomNum = Math.floor(Math.random() * 90000) + 10000;
      newId = `S${randomNum}`;
    }
  }
}

// Function to generate unique phone number
async function generateUniquePhone(originalPhone) {
  let newPhone = originalPhone;
  let counter = 1;
  
  while (true) {
    const existing = await prisma.student.findFirst({
      where: { phone: newPhone }
    });
    
    if (!existing) {
      return newPhone;
    }
    
    // Generate random Uzbek phone number
    const randomNum = Math.floor(Math.random() * 90000000) + 10000000;
    newPhone = `+9989${randomNum}`;
  }
}

async function main() {
  try {
    console.log('üå± Starting Year 6-"–ê"–ù–∞–∑–∞—Ä–æ–≤–∞ –§–µ—Ä—É–∑–∞ –ê–±–±–∞—Å–æ–≤–Ω–∞ class and students seeding...');

    // Find branch and academic year
    const branch = await prisma.branch.findFirst({
      where: { shortName: 'Suzuk' }
    });

    if (!branch) {
      throw new Error('Branch "Suzuk" not found');
    }
    console.log(`‚úÖ Found branch: ${branch.legalName} (ID: ${branch.id})`);

    const academicYear = await prisma.academicYear.findFirst({
      where: { name: '2025-2026' }
    });

    if (!academicYear) {
      throw new Error('Academic year "2025-2026" not found');
    }
    console.log(`‚úÖ Found academic year: ${academicYear.name} (ID: ${academicYear.id})`);

    // Create or find class
    const className = '6-"–ê"–ù–∞–∑–∞—Ä–æ–≤–∞ –§–µ—Ä—É–∑–∞ –ê–±–±–∞—Å–æ–≤–Ω–∞';
    let classRecord = await prisma.class.findFirst({
      where: {
        name: className,
        branchId: branch.id,
        academicYearId: academicYear.id
      }
    });

    if (!classRecord) {
      classRecord = await prisma.class.create({
        data: {
          name: className,
          branchId: branch.id,
          academicYearId: academicYear.id,
          capacity: studentsData.length,
          educationType: 'SECONDARY',
          language: 'UZBEK',
          status: 'ACTIVE'
        }
      });
      console.log(`‚úÖ Created class: ${className} (ID: ${classRecord.id})`);
    } else {
      console.log(`‚úÖ Found existing class: ${className} (ID: ${classRecord.id})`);
    }

    // Process students
    console.log(`üìö Processing ${studentsData.length} students...`);
    let createdCount = 0;
    let errorCount = 0;

    for (const studentData of studentsData) {
      try {
        // Generate unique student ID
        const uniqueStudentId = await generateUniqueStudentId(studentData.studentId);
        if (uniqueStudentId !== studentData.studentId) {
          console.log(`‚ö†Ô∏è  Student ID changed: ${studentData.studentId} ‚Üí ${uniqueStudentId}`);
        }

        // Generate unique phone number
        const uniquePhone = await generateUniquePhone(studentData.phone);
        if (uniquePhone !== studentData.phone) {
          console.log(`üì± Generated phone: ${uniquePhone} for ${studentData.firstName} ${studentData.lastName}`);
        }

        // Hash password
        const hashedPassword = await bcrypt.hash(studentData.password, 10);

        // Create student
        const student = await prisma.student.create({
          data: {
            id: `student_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            studentId: uniqueStudentId,
            lastName: studentData.lastName,
            firstName: studentData.firstName,
            dateOfBirth: new Date(studentData.dateOfBirth),
            phone: uniquePhone,
            password: hashedPassword,
            gender: studentData.gender,
            status: studentData.status,
            branchId: branch.id,
            classId: classRecord.id
          }
        });

        console.log(`‚úÖ Created student: ${student.firstName} ${student.lastName} (${student.studentId})`);
        createdCount++;

      } catch (error) {
        console.error(`‚ùå Error creating student ${studentData.firstName} ${studentData.lastName}:`, error.message);
        errorCount++;
      }
    }

    console.log(`\nüìä Summary:`);
    console.log(`‚úÖ Students created: ${createdCount}`);
    console.log(`‚ùå Errors: ${errorCount}`);
    console.log(`üìö Total processed: ${studentsData.length}`);

    if (errorCount === 0) {
      console.log('\nüéâ All students created successfully!');
    } else {
      console.log(`\n‚ö†Ô∏è  ${errorCount} students failed to create.`);
    }

  } catch (error) {
    console.error('‚ùå Error during seeding:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

main()
  .catch((error) => {
    console.error('‚ùå Seeding failed:', error);
    process.exit(1);
  });
