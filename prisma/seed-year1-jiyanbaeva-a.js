const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

// Student data
const studentsData = [
  {
    studentId: 'S62970',
    lastName: '–ê–∫–±–∞—Ä—Ö–æ–∂–∞–µ–≤–∞',
    firstName: '–ê—Å–∏–ª–∑–æ–¥–∞—Ö–æ–Ω –ê–ª–∏—à–µ—Ä—Ö—É–∂–∞ –∫–∏–∑–∏',
    dateOfBirth: '2001-07-11',
    phone: '+998951515325',
    password: '–ê–∫–±–∞—Ä—Ö–æ–∂–∞–µ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S39177',
    lastName: '–ñ—É—Ä–∞–µ–≤–∞',
    firstName: '–ú–∞—Ö–¥–∏—è',
    dateOfBirth: '2001-07-12',
    phone: '+998951515326',
    password: '–ñ—É—Ä–∞–µ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S56861',
    lastName: '–ê–±–¥—É–≥–æ—Ñ—É—Ä',
    firstName: '–§–æ—Ç–∏–º–∞ –ê–±–¥—É–∫–∞—Ö—Ö–æ—Ä –∫–∏–∑–∏',
    dateOfBirth: '2001-07-13',
    phone: '+998951515327',
    password: '–ê–±–¥—É–≥–æ—Ñ—É—Ä_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S48333',
    lastName: '–ú—É—Ö–∞–º–µ–¥–æ–≤–∞',
    firstName: '–ò–π–º–æ–Ω–∞ –ù–æ–∑–∏–º –∫–∏–∑–∏',
    dateOfBirth: '2001-07-14',
    phone: '+998951515328',
    password: '–ú—É—Ö–∞–º–µ–¥–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S71617',
    lastName: '–•–∞–º–∏–¥—É–ª–ª–∞–µ–≤–∞',
    firstName: '–•–∞–±–∏–±–∞—Ö–æ–Ω',
    dateOfBirth: '2001-07-15',
    phone: '+998951515329',
    password: '–•–∞–º–∏–¥—É–ª–ª–∞–µ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S24758',
    lastName: '–ê–±–¥—É–≥–∞–Ω–∏–µ–≤–∞',
    firstName: '–û–∑–æ–¥–∞',
    dateOfBirth: '2001-07-16',
    phone: '+998951515330',
    password: '–ê–±–¥—É–≥–∞–Ω–∏–µ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S85991',
    lastName: '–¢–æ—Ö–∏—Ä–æ–≤–∞',
    firstName: '–°–æ—Ä–∞ –ò—Å–º–æ–∏–ª –∫–∏–∑–∏',
    dateOfBirth: '2001-07-17',
    phone: '+998951515331',
    password: '–¢–æ—Ö–∏—Ä–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S50452',
    lastName: '–ë–æ–π–º–∏—Ä–∑–∞–µ–≤–∞',
    firstName: '–ê–∏—à–∞ –ò—Å–ª–æ–º–∂–æ–Ω –∫–∏–∑–∏',
    dateOfBirth: '2001-07-18',
    phone: '+998951515332',
    password: '–ë–æ–π–º–∏—Ä–∑–∞–µ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S17506',
    lastName: '–°–∞–¥—É–ª–ª–∞–µ–≤–∞',
    firstName: '–û—Å–∏—ë—Ö–æ–Ω –ú–∞–∫—Å—É–¥—Ö–æ–∂–∞ –∫–∏–∑–∏',
    dateOfBirth: '2001-07-19',
    phone: '+998951515333',
    password: '–°–∞–¥—É–ª–ª–∞–µ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S62973',
    lastName: '–®–∞–º—Å—É—Ç–¥–∏–Ω–æ–≤–∞',
    firstName: '–ú–∞—Ä—è–º',
    dateOfBirth: '2001-07-20',
    phone: '+998951515334',
    password: '–®–∞–º—Å—É—Ç–¥–∏–Ω–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S39180',
    lastName: '–ê–±–¥—É–ª–ª–∞–µ–≤–∞',
    firstName: '–•–∞—Ñ–∏–∑–∞—Ö–æ–Ω –ê–∑–∏–º—Ö–æ–Ω–æ–≤–Ω–∞',
    dateOfBirth: '2001-07-21',
    phone: '+998951515335',
    password: '–ê–±–¥—É–ª–ª–∞–µ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S56864',
    lastName: '–ù–∞–∑–∞—Ä–æ–≤–∞',
    firstName: '–§–∞–∑–∏–ª–∞—Ç –†–∞—Ö–º–∞—Ç–∂–æ–Ω –∫–∏–∑–∏',
    dateOfBirth: '2001-07-22',
    phone: '+998951515336',
    password: '–ù–∞–∑–∞—Ä–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S48336',
    lastName: '–†–∞—Ö–∏–º—Ö–æ–Ω–æ–≤–∞',
    firstName: '–ó—É–±–∞–π—Ä–∞—Ö–æ–Ω –ê–±—Ä–æ—Ä—Ö–æ–Ω “õ–∏–∑–∏',
    dateOfBirth: '2001-07-23',
    phone: '+998951515337',
    password: '–†–∞—Ö–∏–º—Ö–æ–Ω–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S71620',
    lastName: '–ò—à–º—É—Ö–∞–º–µ–¥–æ–≤–∞',
    firstName: '–ò–º–æ–Ω–∞ –ê–±–¥—É–ª–ª–∞–¥–∂–∞–Ω –∫–∏–∑–∏',
    dateOfBirth: '2001-07-24',
    phone: '+998951515338',
    password: '–ò—à–º—É—Ö–∞–º–µ–¥–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S24761',
    lastName: '–®—É—Ö—Ä–∞—Ç–æ–≤–∞',
    firstName: '–ú–∞—Ä—è–º',
    dateOfBirth: '2001-07-25',
    phone: '+998951515339',
    password: '–®—É—Ö—Ä–∞—Ç–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S85994',
    lastName: '–≠—Ä–∫–∏–Ω–æ–≤–∞',
    firstName: '–ú—É—Ö—Å–∏–Ω–∞ –ñ–∞–≤–æ—Ö–∏—Ä “õ–∏–∑–∏',
    dateOfBirth: '2001-07-26',
    phone: '+998951515340',
    password: '–≠—Ä–∫–∏–Ω–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S50455',
    lastName: '–•–∞—Å–∞–Ω–æ–≤–∞',
    firstName: '–§–æ—Ç–∏—Ç–º–∞ –ñ–∞–º—à–∏–¥ –∫–∏–∑–∏',
    dateOfBirth: '2001-07-27',
    phone: '+998951515341',
    password: '–•–∞—Å–∞–Ω–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S17509',
    lastName: '–ë–æ–π–º—É—Ö–∞–º–µ–¥–æ–≤–∞',
    firstName: '–ú—É–±–∏–Ω–∞ –û—Ç–∞–±–µ–ø–∫ –∫–∏–∑–∏',
    dateOfBirth: '2001-07-28',
    phone: '+998951515342',
    password: '–ë–æ–π–º—É—Ö–∞–º–µ–¥–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  }
];

// Function to generate unique student ID
async function generateUniqueStudentId(originalId) {
  let newId = originalId;
  let counter = 1;
  
  while (true) {
    const existing = await prisma.student.findUnique({
      where: { studentId: newId }
    });
    
    if (!existing) {
      return newId;
    }
    
    // Replace last 2 digits with counter (01, 02, 03, etc.)
    const baseId = originalId.substring(0, 3);
    newId = `${baseId}${counter.toString().padStart(2, '0')}`;
    counter++;
    
    if (counter > 99) {
      // If we can't find a unique ID, generate a completely random one
      const randomNum = Math.floor(Math.random() * 90000) + 10000;
      newId = `S${randomNum}`;
    }
  }
}

// Function to generate unique phone number
async function generateUniquePhone(originalPhone) {
  let newPhone = originalPhone;
  let counter = 1;
  
  while (true) {
    const existing = await prisma.student.findFirst({
      where: { phone: newPhone }
    });
    
    if (!existing) {
      return newPhone;
    }
    
    // Generate random Uzbek phone number
    const randomNum = Math.floor(Math.random() * 90000000) + 10000000;
    newPhone = `+9989${randomNum}`;
  }
}

async function main() {
  try {
    console.log('üå± Starting Year 1"–ê"–ñ–∏—è–Ω–±–∞–µ–≤–∞ –ë–µ–∫–∑–æ–¥–∞ –ê—à–∏—Ä–±–µ–∫–æ–≤–Ω–∞ class and students seeding...');

    // Find branch and academic year
    const branch = await prisma.branch.findFirst({
      where: { shortName: 'Suzuk' }
    });

    if (!branch) {
      throw new Error('Branch "Suzuk" not found');
    }
    console.log(`‚úÖ Found branch: ${branch.legalName} (ID: ${branch.id})`);

    const academicYear = await prisma.academicYear.findFirst({
      where: { name: '2025-2026' }
    });

    if (!academicYear) {
      throw new Error('Academic year "2025-2026" not found');
    }
    console.log(`‚úÖ Found academic year: ${academicYear.name} (ID: ${academicYear.id})`);

    // Create or find class
    const className = '1"–ê"–ñ–∏—è–Ω–±–∞–µ–≤–∞ –ë–µ–∫–∑–æ–¥–∞ –ê—à–∏—Ä–±–µ–∫–æ–≤–Ω–∞';
    let classRecord = await prisma.class.findFirst({
      where: {
        name: className,
        branchId: branch.id,
        academicYearId: academicYear.id
      }
    });

    if (!classRecord) {
      classRecord = await prisma.class.create({
        data: {
          name: className,
          branchId: branch.id,
          academicYearId: academicYear.id,
          capacity: studentsData.length,
          educationType: 'PRIMARY',
          language: 'UZBEK',
          status: 'ACTIVE'
        }
      });
      console.log(`‚úÖ Created class: ${className} (ID: ${classRecord.id})`);
    } else {
      console.log(`‚úÖ Found existing class: ${className} (ID: ${classRecord.id})`);
    }

    // Process students
    console.log(`üìö Processing ${studentsData.length} students...`);
    let createdCount = 0;
    let errorCount = 0;

    for (const studentData of studentsData) {
      try {
        // Generate unique student ID
        const uniqueStudentId = await generateUniqueStudentId(studentData.studentId);
        if (uniqueStudentId !== studentData.studentId) {
          console.log(`‚ö†Ô∏è  Student ID changed: ${studentData.studentId} ‚Üí ${uniqueStudentId}`);
        }

        // Generate unique phone number
        const uniquePhone = await generateUniquePhone(studentData.phone);
        if (uniquePhone !== studentData.phone) {
          console.log(`üì± Generated phone: ${uniquePhone} for ${studentData.firstName} ${studentData.lastName}`);
        }

        // Hash password
        const hashedPassword = await bcrypt.hash(studentData.password, 10);

        // Create student
        const student = await prisma.student.create({
          data: {
            id: `student_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            studentId: uniqueStudentId,
            lastName: studentData.lastName,
            firstName: studentData.firstName,
            dateOfBirth: new Date(studentData.dateOfBirth),
            phone: uniquePhone,
            password: hashedPassword,
            gender: studentData.gender,
            status: studentData.status,
            branchId: branch.id,
            classId: classRecord.id
          }
        });

        console.log(`‚úÖ Created student: ${student.firstName} ${student.lastName} (${student.studentId})`);
        createdCount++;

      } catch (error) {
        console.error(`‚ùå Error creating student ${studentData.firstName} ${studentData.lastName}:`, error.message);
        errorCount++;
      }
    }

    console.log(`\nüìä Summary:`);
    console.log(`‚úÖ Students created: ${createdCount}`);
    console.log(`‚ùå Errors: ${errorCount}`);
    console.log(`üìö Total processed: ${studentsData.length}`);

    if (errorCount === 0) {
      console.log('\nüéâ All students created successfully!');
    } else {
      console.log(`\n‚ö†Ô∏è  ${errorCount} students failed to create.`);
    }

  } catch (error) {
    console.error('‚ùå Error during seeding:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

main()
  .catch((error) => {
    console.error('‚ùå Seeding failed:', error);
    process.exit(1);
  });
