const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

// Student data
const studentsData = [
  {
    studentId: 'S50425',
    lastName: '–ê–±–¥—É–∂–∞–±–±–æ—Ä–æ–≤–∞',
    firstName: '–ò–π–º–æ–Ω–∞—Ö–æ–Ω –ê–∑–∞–º–∞—Ç–æ–≤–Ω–∞',
    dateOfBirth: '2001-04-28',
    phone: '+998951515251',
    password: '–ê–±–¥—É–∂–∞–±–±–æ—Ä–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S17479',
    lastName: '–ê–±–¥—É—Ä–∞—Ö–º–∞–Ω–æ–≤–∞',
    firstName: '–†–æ–±–∏—è—Ö–æ–Ω –ê–∑–∏–∑ –∫–∏–∑–∏',
    dateOfBirth: '2001-04-29',
    phone: '+998951515252',
    password: '–ê–±–¥—É—Ä–∞—Ö–º–∞–Ω–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S62946',
    lastName: '–ë–æ–π–º—É—Ö–∞–º–µ–¥–æ–≤–∞',
    firstName: '–†–æ–±–∏—è –û—Ç–∞–±–µ–∫ –∫–∏–∑–∏',
    dateOfBirth: '2001-04-30',
    phone: '+998951515253',
    password: '–ë–æ–π–º—É—Ö–∞–º–µ–¥–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S39153',
    lastName: '–ñ—û—Ä–∞–µ–≤–∞',
    firstName: '–°–∞—Ñ–∏—è –î–æ–Ω–∏—ë—Ä–±–µ–∫ “õ–∏–∑–∏',
    dateOfBirth: '2001-05-01',
    phone: '+998951515254',
    password: '–ñ—û—Ä–∞–µ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S56837',
    lastName: '–ò–±–æ–¥—É–ª–ª–∞–µ–≤–∞',
    firstName: '–ú—É–±–∏–Ω–∞ –ê–±–¥—É—Ä–∞—Ö–º–æ–Ω –∫–∏–∑–∏',
    dateOfBirth: '2001-05-02',
    phone: '+998951515255',
    password: '–ò–±–æ–¥—É–ª–ª–∞–µ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S48309',
    lastName: '–ò–ª—Ö–æ–º–æ–≤–∞',
    firstName: '–ú—É—Å–ª–∏–º–∞ –ò—Å–º–æ–∏–ª –∫–∏–∑–∏',
    dateOfBirth: '2001-05-03',
    phone: '+998951515256',
    password: '–ò–ª—Ö–æ–º–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S71593',
    lastName: '–ò—Ä–∏—Å–±–æ–µ–≤–∞',
    firstName: '–°–∞–º–∏—Ä–∞ –Å–¥–≥–æ—Ä –∫–∏–∑–∏',
    dateOfBirth: '2001-05-04',
    phone: '+998951515257',
    password: '–ò—Ä–∏—Å–±–æ–µ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S24734',
    lastName: '–ú–∏—Ä–¥–∞–¥–∞–µ–≤–∞',
    firstName: '–°–æ–ª–∏—Ö–∞ –ò–ª—Ö–æ–º –∫–∏–∑–∏',
    dateOfBirth: '2001-05-05',
    phone: '+998951515258',
    password: '–ú–∏—Ä–¥–∞–¥–∞–µ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S85967',
    lastName: '–ù—É—Ä–Ω–∞–∑–∞—Ä–æ–≤–∞',
    firstName: '–ó–µ–π–Ω–µ–ø –ò—Å–∫–µ–Ω–¥–µ—Ä –∫–∏–∑–∏',
    dateOfBirth: '2001-05-06',
    phone: '+998951515259',
    password: '–ù—É—Ä–Ω–∞–∑–∞—Ä–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S50428',
    lastName: '–û–¥–∏–ª–±–µ–∫–æ–≤–∞',
    firstName: '–ú—É–Ω–∏—Å–∞ –£–º–∞—Ä –∫–∏–∑–∏',
    dateOfBirth: '2001-05-07',
    phone: '+998951515260',
    password: '–û–¥–∏–ª–±–µ–∫–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S17482',
    lastName: '–°–æ–±–∏—Ä–∂–æ–Ω–æ–≤–∞',
    firstName: '–ú—É—Å–ª–∏–º–∞ –î–∏–ª—à–æ–¥ –∫–∏–∑–∏',
    dateOfBirth: '2001-05-08',
    phone: '+998951515261',
    password: '–°–æ–±–∏—Ä–∂–æ–Ω–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S62949',
    lastName: '–£–±–∞–π–¥—É–ª–ª–∞–µ–≤–∞',
    firstName: '–†–æ–±–∏—è –ê—Å–∞—Ç—É–ª–ª–∞ –∫–∏–∑–∏',
    dateOfBirth: '2001-05-09',
    phone: '+998951515262',
    password: '–£–±–∞–π–¥—É–ª–ª–∞–µ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S39156',
    lastName: '–®–∞–º—Å—É—Ç–¥–∏–Ω–æ–≤–∞',
    firstName: '–ò–π–º–æ–Ω–∞ –ë–æ–±—É—Ä –∫–∏–∑–∏',
    dateOfBirth: '2001-05-10',
    phone: '+998951515263',
    password: '–®–∞–º—Å—É—Ç–¥–∏–Ω–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S56840',
    lastName: '–Æ—Å—É–ø–æ–≤–∞',
    firstName: '–û–º–∏–Ω–∞—Ö–æ–Ω –ù—É—Ä–∏–¥–¥–∏–Ω –∫–∏–∑–∏',
    dateOfBirth: '2001-05-11',
    phone: '+998951515264',
    password: '–Æ—Å—É–ø–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S48312',
    lastName: '–°–æ–¥–∏–∫–∂–æ–Ω–æ–≤–∞',
    firstName: '–ú–∞–ª–∏–∫–∞—Ö–æ–Ω –ú—É—Ö–∞–º–º–∞–¥–∞–ª–∏ –∫–∏–∑–∏',
    dateOfBirth: '2001-05-12',
    phone: '+998951515265',
    password: '–°–æ–¥–∏–∫–∂–æ–Ω–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S71596',
    lastName: '–®–∞–≤–∫–∞—Ç–æ–≤–∞',
    firstName: '–†–æ–±–∏—è –î–æ–Ω–∏—ë—Ä –∫–∏–∑–∏',
    dateOfBirth: '2001-05-13',
    phone: '+998951515266',
    password: '–®–∞–≤–∫–∞—Ç–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S24737',
    lastName: '–¢—É—Ä—Å—É–Ω–æ–≤–∞',
    firstName: '–ú—É–Ω–∞–≤–≤–∞—Ä—Ö–æ–Ω –õ–∞–∑–∏–∑ –∫–∏–∑–∏',
    dateOfBirth: '2001-05-14',
    phone: '+998951515267',
    password: '–¢—É—Ä—Å—É–Ω–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  },
  {
    studentId: 'S85970',
    lastName: '–ú–∞—Ö–º—É–¥–∂–æ–Ω–æ–≤–∞',
    firstName: '–§–∞—Ä–∑–æ–Ω–∞ –®–æ—Ö—Ä—É—Ö –∫–∏–∑–∏',
    dateOfBirth: '2001-05-15',
    phone: '+998951515268',
    password: '–ú–∞—Ö–º—É–¥–∂–æ–Ω–æ–≤–∞_suzuk',
    gender: 'FEMALE',
    status: 'ACTIVE'
  }
];

// Function to generate unique student ID
async function generateUniqueStudentId(originalId) {
  let newId = originalId;
  let counter = 1;
  
  while (true) {
    const existing = await prisma.student.findUnique({
      where: { studentId: newId }
    });
    
    if (!existing) {
      return newId;
    }
    
    // Replace last 2 digits with counter (01, 02, 03, etc.)
    const baseId = originalId.substring(0, 3);
    newId = `${baseId}${counter.toString().padStart(2, '0')}`;
    counter++;
    
    if (counter > 99) {
      // If we can't find a unique ID, generate a completely random one
      const randomNum = Math.floor(Math.random() * 90000) + 10000;
      newId = `S${randomNum}`;
    }
  }
}

// Function to generate unique phone number
async function generateUniquePhone(originalPhone) {
  let newPhone = originalPhone;
  let counter = 1;
  
  while (true) {
    const existing = await prisma.student.findFirst({
      where: { phone: newPhone }
    });
    
    if (!existing) {
      return newPhone;
    }
    
    // Generate random Uzbek phone number
    const randomNum = Math.floor(Math.random() * 90000000) + 10000000;
    newPhone = `+9989${randomNum}`;
  }
}

async function main() {
  try {
    console.log('üå± Starting Year 4-"–ê"–ë–µ–∫–º—É—Ä–∞—Ç–æ–≤–∞ –ù–∏–≥–æ—Ä–∞ –ú–∞—Ö–∞–º–∞—Ç–æ–≤–Ω–∞ class and students seeding...');

    // Find branch and academic year
    const branch = await prisma.branch.findFirst({
      where: { shortName: 'Suzuk' }
    });

    if (!branch) {
      throw new Error('Branch "Suzuk" not found');
    }
    console.log(`‚úÖ Found branch: ${branch.legalName} (ID: ${branch.id})`);

    const academicYear = await prisma.academicYear.findFirst({
      where: { name: '2025-2026' }
    });

    if (!academicYear) {
      throw new Error('Academic year "2025-2026" not found');
    }
    console.log(`‚úÖ Found academic year: ${academicYear.name} (ID: ${academicYear.id})`);

    // Create or find class
    const className = '4-"–ê"–ë–µ–∫–º—É—Ä–∞—Ç–æ–≤–∞ –ù–∏–≥–æ—Ä–∞ –ú–∞—Ö–∞–º–∞—Ç–æ–≤–Ω–∞';
    let classRecord = await prisma.class.findFirst({
      where: {
        name: className,
        branchId: branch.id,
        academicYearId: academicYear.id
      }
    });

    if (!classRecord) {
      classRecord = await prisma.class.create({
        data: {
          name: className,
          branchId: branch.id,
          academicYearId: academicYear.id,
          capacity: studentsData.length,
          educationType: 'PRIMARY',
          language: 'UZBEK',
          status: 'ACTIVE'
        }
      });
      console.log(`‚úÖ Created class: ${className} (ID: ${classRecord.id})`);
    } else {
      console.log(`‚úÖ Found existing class: ${className} (ID: ${classRecord.id})`);
    }

    // Process students
    console.log(`üìö Processing ${studentsData.length} students...`);
    let createdCount = 0;
    let errorCount = 0;

    for (const studentData of studentsData) {
      try {
        // Generate unique student ID
        const uniqueStudentId = await generateUniqueStudentId(studentData.studentId);
        if (uniqueStudentId !== studentData.studentId) {
          console.log(`‚ö†Ô∏è  Student ID changed: ${studentData.studentId} ‚Üí ${uniqueStudentId}`);
        }

        // Generate unique phone number
        const uniquePhone = await generateUniquePhone(studentData.phone);
        if (uniquePhone !== studentData.phone) {
          console.log(`üì± Generated phone: ${uniquePhone} for ${studentData.firstName} ${studentData.lastName}`);
        }

        // Hash password
        const hashedPassword = await bcrypt.hash(studentData.password, 10);

        // Create student
        const student = await prisma.student.create({
          data: {
            id: `student_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            studentId: uniqueStudentId,
            lastName: studentData.lastName,
            firstName: studentData.firstName,
            dateOfBirth: new Date(studentData.dateOfBirth),
            phone: uniquePhone,
            password: hashedPassword,
            gender: studentData.gender,
            status: studentData.status,
            branchId: branch.id,
            classId: classRecord.id
          }
        });

        console.log(`‚úÖ Created student: ${student.firstName} ${student.lastName} (${student.studentId})`);
        createdCount++;

      } catch (error) {
        console.error(`‚ùå Error creating student ${studentData.firstName} ${studentData.lastName}:`, error.message);
        errorCount++;
      }
    }

    console.log(`\nüìä Summary:`);
    console.log(`‚úÖ Students created: ${createdCount}`);
    console.log(`‚ùå Errors: ${errorCount}`);
    console.log(`üìö Total processed: ${studentsData.length}`);

    if (errorCount === 0) {
      console.log('\nüéâ All students created successfully!');
    } else {
      console.log(`\n‚ö†Ô∏è  ${errorCount} students failed to create.`);
    }

  } catch (error) {
    console.error('‚ùå Error during seeding:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

main()
  .catch((error) => {
    console.error('‚ùå Seeding failed:', error);
    process.exit(1);
  });
